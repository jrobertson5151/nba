library(tidyverse)
install("tidyverse")
install.packages("tidyverse")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("tidyverse")
install.packages("tidyverse")
ggplot2
library(tidyverse)
mpg
mpg.head
mpg.head()
mpg
mpg.model
mpg[model]
mpg$model
ggplot2(mpg) + geom_point(aes(displ,hwy))
ggplot(mpg) + geom_point(aes(displ,hwy))
mpg
ggplot(mpg) + geom_point(aes(displ,hwy,color=fl))
ggplot(mpg) + geom_point(aes(displ,hwy,color=cyl))
ggplot(mpg) + geom_point(aes(displ,hwy,color=hwy))
ggplot(mpg) + geom_point(aes(displ,hwy,color=hwy)) +
facet_wrap(~year)
facet_wrap(~cty)
ggplot(mpg) + geom_point(aes(displ,hwy,color=hwy)) +
facet_wrap(~cty)
facet_wrap(~cty)
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
demo
tribble
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
?flights
flights$month
typeof(flights$month)
devtools::install_github("abresler/nbastatR")
library("devtools")
install.packages(devtools)
install.packages("devtools)
install.packages("devtools")
devtools::install_github("abresler/nbastatR")
library("nbastatR")
warnings()
library(dplyr)
standings()
standings(2018)
getwd()
install.packages(c("broom", "dbplyr", "devtools", "dplyr", "forcats", "ggplot2", "glue", "haven", "hms", "httr", "jsonlite", "modelr", "nycflights13", "pillar", "pkgbuild", "pkgconfig", "plyr", "progress", "purrr", "R6", "rcmdcheck", "Rcpp", "reprex", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tidyselect", "tidyverse", "usethis", "xml2"))
library(tidyverse)
filter()
library(tidyverse)
library(rvest)
?bindrows
?bind_rows
ps <- c('adamsjo01', 'adamsst01', 'cousybo01')
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
is.null(NULL)
!is.null(NULL)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
print(NULL)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
iris
bind_rows(NULL, iris)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
per_game('data/raw2', ps)
q
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
iris
iris %>% as.tibble
iris %>% as.tibble()
iris %>% type_convert(col_types=cols(.default=col_character()))
iris %>% type_convert(col_types=cols(.default=col_character())) %>% as.tibble()
iris %>% as.tibble() %>% type_convert(col_types=cols(.default=col_character())) %>% as.tibble()
iris %>% as.tibble() %>% type_convert(col_types=cols(.default=col_character()))
iris %>% as.tibble() %>% type_convert(col_types=cols(col_character()))
iris %>% as.tibble() %>% type_convert(col_types=cols(.default=col_character()))
df <- data.frame(x=c(5,7,8), y=c(1,4,2))
df
df
df
df %>% type_convert(cols(x=col_character()))
df %>% type_convert(cols(x=col_character())) %>% as_tibble()
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
?rbind
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
?mutate_all
df
df %>% mutate_all(as.character())
df %>% mutate_all(as.character()) %>% as.tibble()
df %>% mutate_all(as.character()) %>% as_tibble()
df <- as_tibble()
df <- as_tibble(df)
df
df <- as_tibble(iris)
df
bind_rows(df, NULL)
bind_rows(df, c(1,4,5,6,'setosa'))
df %>% transmute_all(as.character()) %>% as_tibble()
df %>% transmute_all(as.character())
df
df %>% mutate_all(as.character)
df %>% transmute_all(as.character)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
per_game('data/raw2', ps)
df <- .Last.value
filter(df, str_detect(Season, '-'))
source('~/Coding/nba2/data/raw2/parser.R')
df <- per_game('data/raw2', ps)
df
source('~/Coding/nba2/data/raw2/parser.R')
df <- per_game('data/raw2', ps)
df
filter(df, str_detect(Season, '-'))
sd
df
View(df)
df <- per_game('data/raw2', ps)
df
source('~/Coding/nba2/data/raw2/parser.R')
df <- per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
df <- per_game('data/raw2', ps)
df
source('~/Coding/nba2/data/raw2/parser.R')
df <- per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
df <- per_game('data/raw2', ps)
source('~/Coding/nba2/data/raw2/parser.R')
df <- per_game('data/raw2', ps)
df
source('~/Coding/nba2/data/raw2/parser.R')
filter(df, str_detect(Season, '-'))
filter(df, str_detect(Season, '-')) %>% type_convert()
filter(df, str_detect(Season, '-')) %>% filter(df, !str_detect(G, 'Did')) %>% type_convert()
filter(df, str_detect(Season, '-')) %>% filter(df, not(str_detect(G, 'Did'))) %>% type_convert()
filter(df, str_detect(Season, '-')) %>% filter(df, str_detect(G, 'Did')) %>% type_convert()
filter(df, str_detect(Season, '-')) %>% type_convert()
filter(df, str_detect(Season, '-')) %>% filter(str_detect(G, 'Did')) %>% type_convert()
filter(df, str_detect(Season, '-')) %>% filter(!str_detect(G, 'Did')) %>% type_convert()
